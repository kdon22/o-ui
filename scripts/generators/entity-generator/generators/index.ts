/**
 * Entity Generator Modules
 * 
 * Exports all generator modules for entity blueprint components.
 */

import { EntityConfig } from '../config';

type FileWriteFunction = (path: string, content: string) => Promise<void>;

/**
 * Generate type definitions for the entity
 */
export async function generateTypeDefinitions(config: EntityConfig, writeFile: FileWriteFunction): Promise<void> {
  // TODO: Implement type definitions generation
  const filePath = `${config.entityDir}/types/index.ts`;
  const content = `/**
 * ${config.entityNameCapitalized} Type Definitions
 * Auto-generated by entity generator
 */

export interface ${config.entityNameCapitalized} {
  id: string;
  ${config.properties.map(prop => `${prop.name}${prop.required ? '' : '?'}: ${prop.type};`).join('\n  ')}
}

export type ${config.entityNameCapitalized}DTO = ${config.entityNameCapitalized};
`;

  await writeFile(filePath, content);
}

/**
 * Generate REST adapter for the entity
 */
export async function generateRestAdapter(config: EntityConfig, writeFile: FileWriteFunction): Promise<void> {
  // TODO: Implement REST adapter generation
  const filePath = `${config.entityDir}/hooks/adapters/rest-adapter.ts`;
  const content = `/**
 * ${config.entityNameCapitalized} REST Adapter
 * Auto-generated by entity generator
 */

import { DataAdapter } from '@/lib/client/entity-factory';
import { ${config.entityNameCapitalized}, ${config.entityNameCapitalized}DTO } from '../../types';

export const ${config.entityName}RestAdapter: DataAdapter<${config.entityNameCapitalized}, ${config.entityNameCapitalized}DTO> = {
  async getAll() {
    // TODO: Implement REST API call
    return [];
  },

  async getById(id: string) {
    // TODO: Implement REST API call
    return null;
  },

  async create(data: Partial<${config.entityNameCapitalized}>) {
    // TODO: Implement REST API call
    return null;
  },

  async update(id: string, data: Partial<${config.entityNameCapitalized}>) {
    // TODO: Implement REST API call
    return null;
  },

  async delete(id: string) {
    // TODO: Implement REST API call
    return false;
  }
};
`;

  await writeFile(filePath, content);
}

/**
 * Generate Zustand adapter for the entity
 */
export async function generateZustandAdapter(config: EntityConfig, writeFile: FileWriteFunction): Promise<void> {
  // TODO: Implement Zustand adapter generation
  const filePath = `${config.entityDir}/hooks/adapters/zustand-adapter.ts`;
  const content = `/**
 * ${config.entityNameCapitalized} Zustand Adapter
 * Auto-generated by entity generator
 */

import { create } from 'zustand';
import { DataAdapter } from '@/lib/client/entity-factory';
import { ${config.entityNameCapitalized}, ${config.entityNameCapitalized}DTO } from '../../types';

interface ${config.entityNameCapitalized}Store {
  entities: Record<string, ${config.entityNameCapitalized}>;
  isLoading: boolean;
  error: Error | null;

  add: (entity: ${config.entityNameCapitalized}) => void;
  update: (id: string, entity: Partial<${config.entityNameCapitalized}>) => void;
  remove: (id: string) => void;
}

const use${config.entityNameCapitalized}Store = create<${config.entityNameCapitalized}Store>((set) => ({
  entities: {},
  isLoading: false,
  error: null,

  add: (entity) => set((state) => ({
    entities: { ...state.entities, [entity.id]: entity }
  })),

  update: (id, data) => set((state) => ({
    entities: { 
      ...state.entities, 
      [id]: { ...state.entities[id], ...data }
    }
  })),

  remove: (id) => set((state) => {
    const newEntities = { ...state.entities };
    delete newEntities[id];
    return { entities: newEntities };
  })
}));

export const ${config.entityName}ZustandAdapter: DataAdapter<${config.entityNameCapitalized}, ${config.entityNameCapitalized}DTO> = {
  async getAll() {
    const store = use${config.entityNameCapitalized}Store.getState();
    return Object.values(store.entities);
  },

  async getById(id: string) {
    const store = use${config.entityNameCapitalized}Store.getState();
    return store.entities[id] || null;
  },

  async create(data: Partial<${config.entityNameCapitalized}>) {
    const entity = { id: crypto.randomUUID(), ...data } as ${config.entityNameCapitalized};
    use${config.entityNameCapitalized}Store.getState().add(entity);
    return entity;
  },

  async update(id: string, data: Partial<${config.entityNameCapitalized}>) {
    use${config.entityNameCapitalized}Store.getState().update(id, data);
    return use${config.entityNameCapitalized}Store.getState().entities[id] || null;
  },

  async delete(id: string) {
    use${config.entityNameCapitalized}Store.getState().remove(id);
    return true;
  }
};
`;

  await writeFile(filePath, content);
}

/**
 * Generate entity factory for the entity
 */
export async function generateEntityFactory(config: EntityConfig, writeFile: FileWriteFunction): Promise<void> {
  // TODO: Implement entity factory generation
  const filePath = `${config.entityDir}/hooks/entity-factory.ts`;
  const content = `/**
 * ${config.entityNameCapitalized} Entity Factory
 * Auto-generated by entity generator
 */

import { createEntityHooks, HookDataSource, DataAdapter } from '@/lib/client/entity-factory';
import { ${config.entityName}RestAdapter } from './adapters/rest-adapter';
import { ${config.entityName}ZustandAdapter } from './adapters/zustand-adapter';
import { ${config.entityNameCapitalized}, ${config.entityNameCapitalized}DTO } from '../types';

// Create a composite data source with all adapters
const dataSource: HookDataSource<${config.entityNameCapitalized}, ${config.entityNameCapitalized}DTO> = {
  primary: ${config.entityName}RestAdapter,
  cache: ${config.entityName}ZustandAdapter,
};

// Create and export entity hooks
export const { 
  useEntity: use${config.entityNameCapitalized},
  useEntityList: use${config.entityNameCapitalized}List,
  useEntityMutation: use${config.entityNameCapitalized}Mutation,
  useEntityManager: use${config.entityNameCapitalized}Manager
} = createEntityHooks<${config.entityNameCapitalized}, ${config.entityNameCapitalized}DTO>(dataSource);
`;

  await writeFile(filePath, content);
}

/**
 * Generate index exports for the entity
 */
export async function generateIndex(config: EntityConfig, writeFile: FileWriteFunction): Promise<void> {
  // TODO: Implement index exports generation
  const filePath = `${config.entityDir}/index.ts`;
  const content = `/**
 * ${config.entityNameCapitalized} Module
 * Auto-generated by entity generator
 */

// Re-export all types
export * from './types';

// Re-export all hooks
export { 
  use${config.entityNameCapitalized},
  use${config.entityNameCapitalized}List,
  use${config.entityNameCapitalized}Mutation,
  use${config.entityNameCapitalized}Manager
} from './hooks/entity-factory';
`;

  await writeFile(filePath, content);
} 